{"ast":null,"code":"import Api from 'Api/api';\nimport { call, put, take } from 'redux-saga/effects';\nimport { REGISTER_REQUEST, REGISTER_SUCCESS, REGISTER_ERROR } from 'store/actionTypes/registerActionType';\nimport { registerSuccess, registerError, saveRegisterToken } from 'store/actions/registerActions';\nimport { message } from 'antd';\nexport function fakeAutoRise(email, password, fullName, companyName) {\n  return new Promise(async (resolve, reject) => {\n    let headerConfig = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const result = await Api.post('company/register', {\n        email: email,\n        password: password,\n        fullname: fullName,\n        companyName: companyName\n      }, headerConfig).catch(error => {\n        if (error.response.status === 400) {\n          console.log(error.response.status);\n          message.error('حسابی با این ایمیل قبلا ثبت شده است');\n        } else {\n          message.error('لطفا وضعیت اتصال به اینترنت را بررسی نمایید');\n        }\n\n        reject(error);\n      }).then(response => {\n        console.log(response.data.accessToken);\n        window.localStorage.setItem('accessToken', response.data.accessToken);\n        window.localStorage.setItem('refreshToken', response.data.refreshToken);\n        resolve(response.data.accessToken);\n      });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nexport function deleteToken() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      window.localStorage.setItem('accessToken', '');\n      resolve('');\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nexport function* autorize(email, password, fullName, companyName) {\n  try {\n    const token = yield call(fakeAutoRise, email, password, fullName, companyName);\n    yield put(registerSuccess(REGISTER_SUCCESS));\n    yield put(saveRegisterToken(token));\n  } catch (error) {\n    yield put(registerError(REGISTER_ERROR));\n  }\n}\nexport function* registerFlow() {\n  while (true) {\n    const _ref = yield take(REGISTER_REQUEST),\n          email = _ref.email,\n          password = _ref.password,\n          fullname = _ref.fullname,\n          companyName = _ref.companyName;\n\n    yield call(autorize, email, password, fullname, companyName);\n  }\n}","map":{"version":3,"sources":["/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/src/store/sagas/registerSaga.tsx"],"names":["Api","call","put","take","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_ERROR","registerSuccess","registerError","saveRegisterToken","message","fakeAutoRise","email","password","fullName","companyName","Promise","resolve","reject","headerConfig","headers","result","post","fullname","catch","error","response","status","console","log","then","data","accessToken","window","localStorage","setItem","refreshToken","e","deleteToken","autorize","token","registerFlow"],"mappings":"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","sourcesContent":["import Api from 'Api/api';\nimport { call, put, take } from 'redux-saga/effects';\nimport {\n  REGISTER_REQUEST,\n  REGISTER_SUCCESS,\n  REGISTER_ERROR,\n} from 'store/actionTypes/registerActionType';\nimport {\n  registerSuccess,\n  registerError,\n  saveRegisterToken,\n} from 'store/actions/registerActions';\nimport { message } from 'antd';\n\nexport function fakeAutoRise(\n  email: string,\n  password: string,\n  fullName: string,\n  companyName: string,\n) {\n  return new Promise(async (resolve, reject) => {\n    let headerConfig = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const result = await Api.post(\n        'company/register',\n        {\n          email: email,\n          password: password,\n          fullname: fullName,\n          companyName: companyName,\n        },\n        headerConfig,\n      )\n        .catch((error: any) => {\n          if (error.response.status === 400) {\n            console.log(error.response.status);\n\n            message.error('حسابی با این ایمیل قبلا ثبت شده است');\n          } else {\n            message.error('لطفا وضعیت اتصال به اینترنت را بررسی نمایید');\n          }\n          reject(error);\n        })\n        .then((response: any) => {\n          console.log(response.data.accessToken);\n          window.localStorage.setItem('accessToken', response.data.accessToken);\n          window.localStorage.setItem(\n            'refreshToken',\n            response.data.refreshToken,\n          );\n          resolve(response.data.accessToken);\n        });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function deleteToken() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      window.localStorage.setItem('accessToken', '');\n      resolve('');\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function* autorize(\n  email: string,\n  password: string,\n  fullName: string,\n  companyName: string,\n) {\n  try {\n    const token = yield call(\n      fakeAutoRise,\n      email,\n      password,\n      fullName,\n      companyName,\n    );\n    yield put(registerSuccess(REGISTER_SUCCESS));\n    yield put(saveRegisterToken(token));\n  } catch (error) {\n    yield put(registerError(REGISTER_ERROR));\n  }\n}\n\nexport function* registerFlow() {\n  while (true) {\n    const { email, password, fullname, companyName } = yield take(\n      REGISTER_REQUEST,\n    );\n\n    yield call(autorize, email, password, fullname, companyName);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}