{"ast":null,"code":"import Api from 'Api/api';\nimport { call, put, take } from 'redux-saga/effects';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_ERROR } from 'store/actionTypes';\nimport { loginError, loginSuccess, saveToken } from 'store/actions';\nexport function fakeAutoRize(email, password) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let headerConfig = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const result = await Api.post('company/login', {\n        email,\n        password\n      }, headerConfig).catch(error => {}).then(response => {\n        // console.log(result.data.accessToken);\n        window.localStorage.removeItem('accessToken');\n        window.localStorage.removeItem('refreshToken');\n        window.localStorage.setItem('accessToken', response.data.accessToken);\n        window.localStorage.setItem('refreshToken', response.data.refreshToken);\n        resolve(response.data.accessToken);\n      });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nexport function deleteToken() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      window.localStorage.setItem('accessToken', '');\n      resolve('');\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nexport function* authorize(email, password) {\n  try {\n    const token = yield call(fakeAutoRize, email, password);\n    yield put(loginSuccess(LOGIN_SUCCESS)); //@ts-ignore\n\n    yield put(saveToken(token, localStorage.getItem('accessToken')));\n  } catch (error) {\n    yield put(loginError(LOGIN_ERROR));\n  }\n}\nexport function* loginFlow() {\n  while (true) {\n    const _ref = yield take(LOGIN_REQUEST),\n          email = _ref.email,\n          password = _ref.password;\n\n    yield call(authorize, email, password);\n  }\n}","map":{"version":3,"sources":["/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/src/store/sagas/loginSaga.tsx"],"names":["Api","call","put","take","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","loginError","loginSuccess","saveToken","fakeAutoRize","email","password","Promise","resolve","reject","headerConfig","headers","result","post","catch","error","then","response","window","localStorage","removeItem","setItem","data","accessToken","refreshToken","e","deleteToken","authorize","token","getItem","loginFlow"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB;AAEA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,IAApB,QAAgC,oBAAhC;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,WAAvC,QAA0D,mBAA1D;AAEA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,SAAnC,QAAoD,eAApD;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAqCC,QAArC,EAAuD;AAC5D,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI;AACF,UAAIC,YAAY,GAAG;AACjBC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADQ,OAAnB;AAKA,YAAMC,MAAM,GAAG,MAAMlB,GAAG,CAACmB,IAAJ,CACnB,eADmB,EAEnB;AAAER,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAFmB,EAGnBI,YAHmB,EAKlBI,KALkB,CAKXC,KAAD,IAAgB,CAAE,CALN,EAMlBC,IANkB,CAMZC,QAAD,IAAmB;AACvB;AACAC,QAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,aAA/B;AACAF,QAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,cAA/B;AACAF,QAAAA,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4B,aAA5B,EAA2CJ,QAAQ,CAACK,IAAT,CAAcC,WAAzD;AACAL,QAAAA,MAAM,CAACC,YAAP,CAAoBE,OAApB,CACE,cADF,EAEEJ,QAAQ,CAACK,IAAT,CAAcE,YAFhB;AAIAhB,QAAAA,OAAO,CAACS,QAAQ,CAACK,IAAT,CAAcC,WAAf,CAAP;AACD,OAhBkB,CAArB;AAiBD,KAvBD,CAuBE,OAAOE,CAAP,EAAU;AACVhB,MAAAA,MAAM,CAACgB,CAAD,CAAN;AACD;AACF,GA3BM,CAAP;AA4BD;AAED,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAO,IAAInB,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI;AACFS,MAAAA,MAAM,CAACC,YAAP,CAAoBE,OAApB,CAA4B,aAA5B,EAA2C,EAA3C;AACAb,MAAAA,OAAO,CAAC,EAAD,CAAP;AACD,KAHD,CAGE,OAAOiB,CAAP,EAAU;AACVhB,MAAAA,MAAM,CAACgB,CAAD,CAAN;AACD;AACF,GAPM,CAAP;AAQD;AAED,OAAO,UAAUE,SAAV,CAAoBtB,KAApB,EAAmCC,QAAnC,EAAqD;AAC1D,MAAI;AACF,UAAMsB,KAAK,GAAG,MAAMjC,IAAI,CAACS,YAAD,EAAeC,KAAf,EAAsBC,QAAtB,CAAxB;AACA,UAAMV,GAAG,CAACM,YAAY,CAACH,aAAD,CAAb,CAAT,CAFE,CAGF;;AACA,UAAMH,GAAG,CAACO,SAAS,CAACyB,KAAD,EAAQT,YAAY,CAACU,OAAb,CAAqB,aAArB,CAAR,CAAV,CAAT;AACD,GALD,CAKE,OAAOd,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACK,UAAU,CAACD,WAAD,CAAX,CAAT;AACD;AACF;AAED,OAAO,UAAU8B,SAAV,GAA2B;AAChC,SAAO,IAAP,EAAa;AAAA,iBACiB,MAAMjC,IAAI,CAACC,aAAD,CAD3B;AAAA,UACHO,KADG,QACHA,KADG;AAAA,UACIC,QADJ,QACIA,QADJ;;AAEX,UAAMX,IAAI,CAACgC,SAAD,EAAYtB,KAAZ,EAAmBC,QAAnB,CAAV;AACD;AACF","sourcesContent":["import Api from 'Api/api';\nimport { AxiosResponse, AxiosError } from 'axios';\nimport { call, put, take } from 'redux-saga/effects';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_ERROR } from 'store/actionTypes';\n\nimport { loginError, loginSuccess, saveToken } from 'store/actions';\nexport function fakeAutoRize(email: string, password: string) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let headerConfig = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      const result = await Api.post(\n        'company/login',\n        { email, password },\n        headerConfig,\n      )\n        .catch((error: any) => {})\n        .then((response: any) => {\n          // console.log(result.data.accessToken);\n          window.localStorage.removeItem('accessToken');\n          window.localStorage.removeItem('refreshToken');\n          window.localStorage.setItem('accessToken', response.data.accessToken);\n          window.localStorage.setItem(\n            'refreshToken',\n            response.data.refreshToken,\n          );\n          resolve(response.data.accessToken);\n        });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function deleteToken() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      window.localStorage.setItem('accessToken', '');\n      resolve('');\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function* authorize(email: string, password: string) {\n  try {\n    const token = yield call(fakeAutoRize, email, password);\n    yield put(loginSuccess(LOGIN_SUCCESS));\n    //@ts-ignore\n    yield put(saveToken(token, localStorage.getItem('accessToken')));\n  } catch (error) {\n    yield put(loginError(LOGIN_ERROR));\n  }\n}\n\nexport function* loginFlow(): any {\n  while (true) {\n    const { email, password } = yield take(LOGIN_REQUEST);\n    yield call(authorize, email, password);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}