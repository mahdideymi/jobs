{"ast":null,"code":"import { takeLatest } from 'redux-saga/effects';\nimport { ASYNC_CHANGE_USER_STAGE, ASYNC_CHANGE_ORDER_OF_USER_STAGE, ASYNC_CREATE_USER_STAGE, ASYNC_FETCH_USER_STAGES, ASYNC_REMOVE_USER_STAGE, ASYNC_UPDATE_USER_STAGE } from 'store/actionTypes/UserStage';\nimport { changeUserStage, changeOrderOfUserStage, createUserStage, fetchUserStages, removeUserStage, updateUserStage } from 'store/workers/UserStage'; // listening to changing user employment stage\n\nexport function* watchChangeUserStage() {\n  yield takeLatest(ASYNC_CHANGE_USER_STAGE, changeUserStage);\n} // listening to changing order of each job offers' user's stage\n\nexport function* watchChangeOrderOfUserStage() {\n  yield takeLatest(ASYNC_CHANGE_ORDER_OF_USER_STAGE, changeOrderOfUserStage);\n} // listening to creating user stage for each job offer\n\nexport function* watchCreateUserStage() {\n  yield takeLatest(ASYNC_CREATE_USER_STAGE, createUserStage);\n} // listening to fetching users stages according to each job offer\n\nexport function* watchFetchUserStages() {\n  yield takeLatest(ASYNC_FETCH_USER_STAGES, fetchUserStages);\n} // listening to removing a user stage in a job offer\n\nexport function* watchRemoveUserStage() {\n  yield takeLatest(ASYNC_REMOVE_USER_STAGE, removeUserStage);\n} // listening to updating user stage according to their stage\n\nexport function* watchUpdateUserStage() {\n  yield takeLatest(ASYNC_UPDATE_USER_STAGE, updateUserStage);\n}","map":{"version":3,"sources":["/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/src/store/watchers/UserStage.ts"],"names":["takeLatest","ASYNC_CHANGE_USER_STAGE","ASYNC_CHANGE_ORDER_OF_USER_STAGE","ASYNC_CREATE_USER_STAGE","ASYNC_FETCH_USER_STAGES","ASYNC_REMOVE_USER_STAGE","ASYNC_UPDATE_USER_STAGE","changeUserStage","changeOrderOfUserStage","createUserStage","fetchUserStages","removeUserStage","updateUserStage","watchChangeUserStage","watchChangeOrderOfUserStage","watchCreateUserStage","watchFetchUserStages","watchRemoveUserStage","watchUpdateUserStage"],"mappings":"AAAA,SAASA,UAAT,QAA2B,oBAA3B;AACA,SACEC,uBADF,EAEEC,gCAFF,EAGEC,uBAHF,EAIEC,uBAJF,EAKEC,uBALF,EAMEC,uBANF,QAOO,6BAPP;AAQA,SACEC,eADF,EAEEC,sBAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,yBAPP,C,CASA;;AACA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMb,UAAU,CAACC,uBAAD,EAA0BM,eAA1B,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUO,2BAAV,GAAwC;AAC7C,QAAMd,UAAU,CAACE,gCAAD,EAAmCM,sBAAnC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUO,oBAAV,GAAiC;AACtC,QAAMf,UAAU,CAACG,uBAAD,EAA0BM,eAA1B,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUO,oBAAV,GAAiC;AACtC,QAAMhB,UAAU,CAACI,uBAAD,EAA0BM,eAA1B,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUO,oBAAV,GAAiC;AACtC,QAAMjB,UAAU,CAACK,uBAAD,EAA0BM,eAA1B,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUO,oBAAV,GAAiC;AACtC,QAAMlB,UAAU,CAACM,uBAAD,EAA0BM,eAA1B,CAAhB;AACD","sourcesContent":["import { takeLatest } from 'redux-saga/effects';\nimport {\n  ASYNC_CHANGE_USER_STAGE,\n  ASYNC_CHANGE_ORDER_OF_USER_STAGE,\n  ASYNC_CREATE_USER_STAGE,\n  ASYNC_FETCH_USER_STAGES,\n  ASYNC_REMOVE_USER_STAGE,\n  ASYNC_UPDATE_USER_STAGE,\n} from 'store/actionTypes/UserStage';\nimport {\n  changeUserStage,\n  changeOrderOfUserStage,\n  createUserStage,\n  fetchUserStages,\n  removeUserStage,\n  updateUserStage,\n} from 'store/workers/UserStage';\n\n// listening to changing user employment stage\nexport function* watchChangeUserStage() {\n  yield takeLatest(ASYNC_CHANGE_USER_STAGE, changeUserStage);\n}\n\n// listening to changing order of each job offers' user's stage\nexport function* watchChangeOrderOfUserStage() {\n  yield takeLatest(ASYNC_CHANGE_ORDER_OF_USER_STAGE, changeOrderOfUserStage);\n}\n\n// listening to creating user stage for each job offer\nexport function* watchCreateUserStage() {\n  yield takeLatest(ASYNC_CREATE_USER_STAGE, createUserStage);\n}\n\n// listening to fetching users stages according to each job offer\nexport function* watchFetchUserStages() {\n  yield takeLatest(ASYNC_FETCH_USER_STAGES, fetchUserStages);\n}\n\n// listening to removing a user stage in a job offer\nexport function* watchRemoveUserStage() {\n  yield takeLatest(ASYNC_REMOVE_USER_STAGE, removeUserStage);\n}\n\n// listening to updating user stage according to their stage\nexport function* watchUpdateUserStage() {\n  yield takeLatest(ASYNC_UPDATE_USER_STAGE, updateUserStage);\n}\n"]},"metadata":{},"sourceType":"module"}