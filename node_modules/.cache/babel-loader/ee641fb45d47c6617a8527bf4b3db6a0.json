{"ast":null,"code":"import _defineProperty from \"/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_JOBS, FETCH_JOBS_ERROR, FETCH_JOBS_SUCCESS, ADD_JOB_SUCCESS, EDIT_JOB_SUCCESS, DELETE_JOB_SUCCESS } from 'store/actionTypes';\nconst PRELOAD = {\n  jobs: [],\n  error: false,\n  loading: false\n};\nlet id = 0;\nexport const jobReducer = (state = PRELOAD, action) => {\n  let newState;\n  let newJobs;\n\n  switch (action.type) {\n    case FETCH_JOBS:\n      newState = _objectSpread({}, state, {\n        loading: true\n      });\n      return newState;\n\n    case FETCH_JOBS_ERROR:\n      newState = _objectSpread({}, state, {\n        loading: false,\n        error: true\n      });\n      return newState;\n\n    case FETCH_JOBS_SUCCESS:\n      console.log(action);\n      newState = _objectSpread({}, state, {\n        error: false,\n        loading: false,\n        jobs: action.payload\n      });\n      return newState;\n\n    case ADD_JOB_SUCCESS:\n      const _action$payload = action.payload,\n            jobId = _action$payload.jobId,\n            title = _action$payload.title,\n            jobDescription = _action$payload.jobDescription,\n            numOfCandidates = _action$payload.numOfCandidates;\n      console.log('payload in reducers', action.payload);\n      const job = {\n        jobId,\n        title,\n        jobDescription,\n        numOfCandidates\n      };\n      newJobs = [job, ...state.jobs];\n      newState = _objectSpread({}, state, {\n        jobs: newJobs\n      });\n      return newState;\n\n    case EDIT_JOB_SUCCESS:\n      console.log(action.payload);\n      const jobs = state.jobs.map(item => {\n        if (item.jobId === action.payload.jobId) {\n          return _objectSpread({}, item, {\n            title: action.payload.title\n          });\n        } else {\n          return item;\n        }\n      });\n      newState = _objectSpread({}, state, {\n        jobs\n      });\n      console.log(newState);\n      return newState;\n\n    case DELETE_JOB_SUCCESS:\n      console.log(state.jobs);\n      newJobs = state.jobs.filter(item => item.jobId != action.id); // console.log(newJobs);\n\n      newState = _objectSpread({}, state, {\n        jobs: newJobs\n      });\n      return newState;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/src/store/reducers/jobReducer.ts"],"names":["FETCH_JOBS","FETCH_JOBS_ERROR","FETCH_JOBS_SUCCESS","ADD_JOB_SUCCESS","EDIT_JOB_SUCCESS","DELETE_JOB_SUCCESS","PRELOAD","jobs","error","loading","id","jobReducer","state","action","newState","newJobs","type","console","log","payload","jobId","title","jobDescription","numOfCandidates","job","map","item","filter"],"mappings":";;;;;;AAAA,SACEA,UADF,EAEEC,gBAFF,EAGEC,kBAHF,EAIEC,eAJF,EAMEC,gBANF,EAOEC,kBAPF,QAQO,mBARP;AAYA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,EADQ;AAEdC,EAAAA,KAAK,EAAE,KAFO;AAGdC,EAAAA,OAAO,EAAE;AAHK,CAAhB;AAMA,IAAIC,EAAE,GAAG,CAAT;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGN,OAAT,EAAkBO,MAAlB,KAAkC;AAC1D,MAAIC,QAAJ;AACA,MAAIC,OAAJ;;AAEA,UAAQF,MAAM,CAACG,IAAf;AACE,SAAKhB,UAAL;AACEc,MAAAA,QAAQ,qBAAQF,KAAR;AAAeH,QAAAA,OAAO,EAAE;AAAxB,QAAR;AACA,aAAOK,QAAP;;AACF,SAAKb,gBAAL;AACEa,MAAAA,QAAQ,qBACHF,KADG;AAENH,QAAAA,OAAO,EAAE,KAFH;AAGND,QAAAA,KAAK,EAAE;AAHD,QAAR;AAKA,aAAOM,QAAP;;AACF,SAAKZ,kBAAL;AACEe,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACAC,MAAAA,QAAQ,qBACHF,KADG;AAENJ,QAAAA,KAAK,EAAE,KAFD;AAGNC,QAAAA,OAAO,EAAE,KAHH;AAINF,QAAAA,IAAI,EAAEM,MAAM,CAACM;AAJP,QAAR;AAMA,aAAOL,QAAP;;AACF,SAAKX,eAAL;AAAA,8BAC4DU,MAAM,CAACM,OADnE;AAAA,YACUC,KADV,mBACUA,KADV;AAAA,YACiBC,KADjB,mBACiBA,KADjB;AAAA,YACwBC,cADxB,mBACwBA,cADxB;AAAA,YACwCC,eADxC,mBACwCA,eADxC;AAEEN,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCL,MAAM,CAACM,OAA1C;AACA,YAAMK,GAAG,GAAG;AACVJ,QAAAA,KADU;AAEVC,QAAAA,KAFU;AAGVC,QAAAA,cAHU;AAIVC,QAAAA;AAJU,OAAZ;AAMAR,MAAAA,OAAO,GAAG,CAACS,GAAD,EAAM,GAAGZ,KAAK,CAACL,IAAf,CAAV;AACAO,MAAAA,QAAQ,qBAAQF,KAAR;AAAeL,QAAAA,IAAI,EAAEQ;AAArB,QAAR;AACA,aAAOD,QAAP;;AACF,SAAKV,gBAAL;AACEa,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACM,OAAnB;AACA,YAAMZ,IAAI,GAAGK,KAAK,CAACL,IAAN,CAAWkB,GAAX,CAAgBC,IAAD,IAAoB;AAC9C,YAAIA,IAAI,CAACN,KAAL,KAAeP,MAAM,CAACM,OAAP,CAAeC,KAAlC,EAAyC;AACvC,mCAAYM,IAAZ;AAAkBL,YAAAA,KAAK,EAAER,MAAM,CAACM,OAAP,CAAeE;AAAxC;AACD,SAFD,MAGK;AACH,iBAAOK,IAAP;AACD;AACF,OAPY,CAAb;AAQAZ,MAAAA,QAAQ,qBAAQF,KAAR;AAAeL,QAAAA;AAAf,QAAR;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,aAAOA,QAAP;;AACF,SAAKT,kBAAL;AACEY,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACL,IAAlB;AACAQ,MAAAA,OAAO,GAAGH,KAAK,CAACL,IAAN,CAAWoB,MAAX,CAAmBD,IAAD,IAAoBA,IAAI,CAACN,KAAL,IAAcP,MAAM,CAACH,EAA3D,CAAV,CAFF,CAGE;;AACAI,MAAAA,QAAQ,qBAAQF,KAAR;AAAeL,QAAAA,IAAI,EAAEQ;AAArB,QAAR;AACA,aAAOD,QAAP;;AACF;AACE,aAAOF,KAAP;AApDJ;AAsDD,CA1DM","sourcesContent":["import {\n  FETCH_JOBS,\n  FETCH_JOBS_ERROR,\n  FETCH_JOBS_SUCCESS,\n  ADD_JOB_SUCCESS,\n  EDIT_JOB,\n  EDIT_JOB_SUCCESS,\n  DELETE_JOB_SUCCESS\n} from 'store/actionTypes';\n\nimport { IJobCard } from 'models';\n\nconst PRELOAD = {\n  jobs: [],\n  error: false,\n  loading: false\n};\n\nlet id = 0;\n\nexport const jobReducer = (state = PRELOAD, action: any) => {\n  let newState;\n  let newJobs;\n\n  switch (action.type) {\n    case FETCH_JOBS:\n      newState = { ...state, loading: true };\n      return newState;\n    case FETCH_JOBS_ERROR:\n      newState = {\n        ...state,\n        loading: false,\n        error: true\n      };\n      return newState;\n    case FETCH_JOBS_SUCCESS:\n      console.log(action);\n      newState = {\n        ...state,\n        error: false,\n        loading: false,\n        jobs: action.payload\n      };\n      return newState;\n    case ADD_JOB_SUCCESS:\n      const { jobId, title, jobDescription, numOfCandidates } = action.payload;\n      console.log('payload in reducers', action.payload);\n      const job = {\n        jobId,\n        title,\n        jobDescription,\n        numOfCandidates\n      };\n      newJobs = [job, ...state.jobs];\n      newState = { ...state, jobs: newJobs };\n      return newState;\n    case EDIT_JOB_SUCCESS:\n      console.log(action.payload);\n      const jobs = state.jobs.map((item: IJobCard) => {\n        if (item.jobId === action.payload.jobId) {\n          return { ...item, title: action.payload.title };\n        }\n        else {\n          return item;\n        }\n      });\n      newState = { ...state, jobs };\n      console.log(newState);\n      return newState;\n    case DELETE_JOB_SUCCESS:\n      console.log(state.jobs);\n      newJobs = state.jobs.filter((item: IJobCard) => item.jobId != action.id);\n      // console.log(newJobs);\n      newState = { ...state, jobs: newJobs };\n      return newState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}