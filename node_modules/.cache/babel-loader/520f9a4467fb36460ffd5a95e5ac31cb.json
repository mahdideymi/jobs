{"ast":null,"code":"import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport { FETCH_JOBS, FETCH_JOBS_FAILED, ADD_JOB, ADD_JOB_SUCCESS, ADD_JOB_FAILED, EDIT_JOB, EDIT_JOB_SUCCESS, EDIT_JOB_FAILED, DELETE_JOB, DELETE_JOB_SUCCESS, DELETE_JOB_FAILED } from 'store/actionTypes';\nconst headers = {\n  Authorization: 'hmac ' + localStorage.getItem('accessToken')\n};\n\nconst endpoint = (method, options) => axios.request({\n  method,\n  url: 'https://jsonplaceholder.typicode.com/posts',\n  headers: options.headers,\n  data: options.data\n});\n\nfunction* fetchJobsWorker() {\n  try {// const result = yield call(endpoint, 'GET', {});\n    // console.log(result);\n    // yield put({ type: FETCH_JOBS_SUCCESS, payload: 'result' });\n  } catch (e) {\n    yield put({\n      type: FETCH_JOBS_FAILED\n    });\n  }\n}\n\nfunction* addJobWorker(action) {\n  const data = action.payload;\n\n  try {\n    // yield call(endpoint, 'POST', { data });\n    yield put({\n      type: ADD_JOB_SUCCESS,\n      payload: data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_JOB_FAILED\n    });\n  }\n}\n\nfunction* editJobWorker(action) {\n  const data = action.payload;\n\n  try {\n    // yield call(endpoint, 'PUT', { data });\n    yield put({\n      type: EDIT_JOB_SUCCESS,\n      payload: data\n    });\n  } catch (e) {\n    yield put({\n      type: EDIT_JOB_FAILED\n    });\n  }\n}\n\nfunction* deleteJobWorker({\n  id\n}) {\n  console.log(id);\n  const data = {\n    id\n  };\n\n  try {\n    // yield call(endpoint, 'DELETE', { data });\n    yield put({\n      type: DELETE_JOB_SUCCESS,\n      id\n    });\n  } catch (e) {\n    yield put({\n      type: DELETE_JOB_FAILED\n    });\n  }\n}\n\nexport function* watchFetchJobs() {\n  yield takeLatest(FETCH_JOBS, fetchJobsWorker);\n}\nexport function* watchAddJob() {\n  yield takeLatest(ADD_JOB, addJobWorker);\n}\nexport function* watchEditJob() {\n  yield takeLatest(EDIT_JOB, editJobWorker);\n}\nexport function* watchDeleteJob() {\n  yield takeLatest(DELETE_JOB, deleteJobWorker);\n}","map":{"version":3,"sources":["/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/src/store/sagas/jobSaga.ts"],"names":["axios","put","takeLatest","FETCH_JOBS","FETCH_JOBS_FAILED","ADD_JOB","ADD_JOB_SUCCESS","ADD_JOB_FAILED","EDIT_JOB","EDIT_JOB_SUCCESS","EDIT_JOB_FAILED","DELETE_JOB","DELETE_JOB_SUCCESS","DELETE_JOB_FAILED","headers","Authorization","localStorage","getItem","endpoint","method","options","request","url","data","fetchJobsWorker","e","type","addJobWorker","action","payload","editJobWorker","deleteJobWorker","id","console","log","watchFetchJobs","watchAddJob","watchEditJob","watchDeleteJob"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,UAAd,QAAsC,oBAAtC;AAEA,SACEC,UADF,EAGEC,iBAHF,EAIEC,OAJF,EAKEC,eALF,EAMEC,cANF,EAOEC,QAPF,EAQEC,gBARF,EASEC,eATF,EAUEC,UAVF,EAWEC,kBAXF,EAYEC,iBAZF,QAaO,mBAbP;AAeA,MAAMC,OAAO,GAAG;AACdC,EAAAA,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAb,CAAqB,aAArB;AADX,CAAhB;;AAIA,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAAcC,OAAd,KACfpB,KAAK,CAACqB,OAAN,CAAc;AACZF,EAAAA,MADY;AAEZG,EAAAA,GAAG,EAAE,4CAFO;AAGZR,EAAAA,OAAO,EAAEM,OAAO,CAACN,OAHL;AAIZS,EAAAA,IAAI,EAAEH,OAAO,CAACG;AAJF,CAAd,CADF;;AAQA,UAAUC,eAAV,GAA4B;AAC1B,MAAI,CACF;AACA;AACA;AACD,GAJD,CAIE,OAAOC,CAAP,EAAU;AACV,UAAMxB,GAAG,CAAC;AAAEyB,MAAAA,IAAI,EAAEtB;AAAR,KAAD,CAAT;AACD;AACF;;AAED,UAAUuB,YAAV,CAAuBC,MAAvB,EAAoC;AAClC,QAAML,IAAI,GAAGK,MAAM,CAACC,OAApB;;AACA,MAAI;AACF;AACA,UAAM5B,GAAG,CAAC;AAAEyB,MAAAA,IAAI,EAAEpB,eAAR;AAAyBuB,MAAAA,OAAO,EAAEN;AAAlC,KAAD,CAAT;AACD,GAHD,CAGE,OAAOE,CAAP,EAAU;AACV,UAAMxB,GAAG,CAAC;AAAEyB,MAAAA,IAAI,EAAEnB;AAAR,KAAD,CAAT;AACD;AACF;;AAED,UAAUuB,aAAV,CAAwBF,MAAxB,EAAqC;AACnC,QAAML,IAAI,GAAGK,MAAM,CAACC,OAApB;;AACA,MAAI;AACF;AACA,UAAM5B,GAAG,CAAC;AAAEyB,MAAAA,IAAI,EAAEjB,gBAAR;AAA0BoB,MAAAA,OAAO,EAAEN;AAAnC,KAAD,CAAT;AACD,GAHD,CAGE,OAAOE,CAAP,EAAU;AACV,UAAMxB,GAAG,CAAC;AAAEyB,MAAAA,IAAI,EAAEhB;AAAR,KAAD,CAAT;AACD;AACF;;AAED,UAAUqB,eAAV,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAuC;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACA,QAAMT,IAAI,GAAG;AAAES,IAAAA;AAAF,GAAb;;AACA,MAAI;AACF;AACA,UAAM/B,GAAG,CAAC;AAAEyB,MAAAA,IAAI,EAAEd,kBAAR;AAA4BoB,MAAAA;AAA5B,KAAD,CAAT;AACD,GAHD,CAGE,OAAOP,CAAP,EAAU;AACV,UAAMxB,GAAG,CAAC;AAAEyB,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAT;AACD;AACF;;AAED,OAAO,UAAUsB,cAAV,GAA2B;AAChC,QAAMjC,UAAU,CAACC,UAAD,EAAaqB,eAAb,CAAhB;AACD;AAED,OAAO,UAAUY,WAAV,GAAwB;AAC7B,QAAMlC,UAAU,CAACG,OAAD,EAAUsB,YAAV,CAAhB;AACD;AAED,OAAO,UAAUU,YAAV,GAAyB;AAC9B,QAAMnC,UAAU,CAACM,QAAD,EAAWsB,aAAX,CAAhB;AACD;AAED,OAAO,UAAUQ,cAAV,GAA2B;AAChC,QAAMpC,UAAU,CAACS,UAAD,EAAaoB,eAAb,CAAhB;AACD","sourcesContent":["import axios from 'axios';\nimport { put, takeLatest, call } from 'redux-saga/effects';\n\nimport {\n  FETCH_JOBS,\n  FETCH_JOBS_SUCCESS,\n  FETCH_JOBS_FAILED,\n  ADD_JOB,\n  ADD_JOB_SUCCESS,\n  ADD_JOB_FAILED,\n  EDIT_JOB,\n  EDIT_JOB_SUCCESS,\n  EDIT_JOB_FAILED,\n  DELETE_JOB,\n  DELETE_JOB_SUCCESS,\n  DELETE_JOB_FAILED,\n} from 'store/actionTypes';\n\nconst headers = {\n  Authorization: 'hmac ' + localStorage.getItem('accessToken'),\n};\n\nconst endpoint = (method: any, options: any) =>\n  axios.request({\n    method,\n    url: 'https://jsonplaceholder.typicode.com/posts',\n    headers: options.headers,\n    data: options.data,\n  });\n\nfunction* fetchJobsWorker() {\n  try {\n    // const result = yield call(endpoint, 'GET', {});\n    // console.log(result);\n    // yield put({ type: FETCH_JOBS_SUCCESS, payload: 'result' });\n  } catch (e) {\n    yield put({ type: FETCH_JOBS_FAILED });\n  }\n}\n\nfunction* addJobWorker(action: any) {\n  const data = action.payload;\n  try {\n    // yield call(endpoint, 'POST', { data });\n    yield put({ type: ADD_JOB_SUCCESS, payload: data });\n  } catch (e) {\n    yield put({ type: ADD_JOB_FAILED });\n  }\n}\n\nfunction* editJobWorker(action: any) {\n  const data = action.payload;\n  try {\n    // yield call(endpoint, 'PUT', { data });\n    yield put({ type: EDIT_JOB_SUCCESS, payload: data });\n  } catch (e) {\n    yield put({ type: EDIT_JOB_FAILED });\n  }\n}\n\nfunction* deleteJobWorker({ id }: any) {\n  console.log(id);\n  const data = { id };\n  try {\n    // yield call(endpoint, 'DELETE', { data });\n    yield put({ type: DELETE_JOB_SUCCESS, id });\n  } catch (e) {\n    yield put({ type: DELETE_JOB_FAILED });\n  }\n}\n\nexport function* watchFetchJobs() {\n  yield takeLatest(FETCH_JOBS, fetchJobsWorker);\n}\n\nexport function* watchAddJob() {\n  yield takeLatest(ADD_JOB, addJobWorker);\n}\n\nexport function* watchEditJob() {\n  yield takeLatest(EDIT_JOB, editJobWorker);\n}\n\nexport function* watchDeleteJob() {\n  yield takeLatest(DELETE_JOB, deleteJobWorker);\n}\n"]},"metadata":{},"sourceType":"module"}