{"ast":null,"code":"import _defineProperty from \"/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_STAGES } from 'store/actionTypes';\nimport data from './stages.json';\nconst PRELOAD = data;\nexport const stageReducer = (state = PRELOAD, action) => {\n  switch (action.type) {\n    case FETCH_STAGES:\n      return action.preload;\n\n    case 'ADD_CANDIDATE':\n      const start = state.find(stage => stage.id === action.sourceDroppableId);\n      const end = state.find(stage => stage.id === action.destinationDroppableId);\n      const candidate = start.candidates.find(candidate => candidate.id === action.draggableId);\n\n      if (start === end) {\n        const stage = state.find(stage => stage.id === start.id);\n        const newCandidates = Array.from(stage.candidates);\n        newCandidates.splice(action.sourceIndex, 1);\n        newCandidates.splice(action.destinationIndex, 0, candidate);\n\n        const newStage = _objectSpread({}, stage, {\n          candidates: newCandidates\n        });\n\n        const newState = state.map(stage => stage.id === start.id ? newStage : stage);\n        return newState;\n      }\n\n      const startCandidates = Array.from(start.candidates);\n      startCandidates.splice(action.sourceIndex, 1);\n\n      const newStart = _objectSpread({}, start, {\n        candidates: startCandidates\n      });\n\n      const endCandidates = Array.from(end.candidates);\n      endCandidates.splice(action.destinationIndex, 0, candidate);\n\n      const newEnd = _objectSpread({}, end, {\n        candidates: endCandidates\n      });\n\n      const newState = state.map(stage => {\n        if (stage.id === start.id) return newStart;else if (stage.id === end.id) return newEnd;\n        return stage;\n      });\n      return newState;\n\n    case 'REMOVE_CANDIDATE':\n      return state;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/src/store/reducers/stageReducer.ts"],"names":["FETCH_STAGES","data","PRELOAD","stageReducer","state","action","type","preload","start","find","stage","id","sourceDroppableId","end","destinationDroppableId","candidate","candidates","draggableId","newCandidates","Array","from","splice","sourceIndex","destinationIndex","newStage","newState","map","startCandidates","newStart","endCandidates","newEnd"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,mBAA7B;AAEA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,MAAMC,OAAmB,GAAGD,IAA5B;AAEA,OAAO,MAAME,YAAY,GAAG,CAACC,KAAK,GAAGF,OAAT,EAAkBG,MAAlB,KAAkC;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,YAAL;AACE,aAAOK,MAAM,CAACE,OAAd;;AACF,SAAK,eAAL;AACE,YAAMC,KAAK,GAAGJ,KAAK,CAACK,IAAN,CACXC,KAAD,IAAgBA,KAAK,CAACC,EAAN,KAAaN,MAAM,CAACO,iBADxB,CAAd;AAGA,YAAMC,GAAG,GAAGT,KAAK,CAACK,IAAN,CACTC,KAAD,IAAgBA,KAAK,CAACC,EAAN,KAAaN,MAAM,CAACS,sBAD1B,CAAZ;AAGA,YAAMC,SAAS,GAAGP,KAAK,CAACQ,UAAN,CAAiBP,IAAjB,CACfM,SAAD,IAAoBA,SAAS,CAACJ,EAAV,KAAiBN,MAAM,CAACY,WAD5B,CAAlB;;AAIA,UAAIT,KAAK,KAAKK,GAAd,EAAmB;AACjB,cAAMH,KAAK,GAAGN,KAAK,CAACK,IAAN,CAAWC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaH,KAAK,CAACG,EAAvC,CAAd;AACA,cAAMO,aAAa,GAAGC,KAAK,CAACC,IAAN,CAAWV,KAAK,CAACM,UAAjB,CAAtB;AACAE,QAAAA,aAAa,CAACG,MAAd,CAAqBhB,MAAM,CAACiB,WAA5B,EAAyC,CAAzC;AACAJ,QAAAA,aAAa,CAACG,MAAd,CAAqBhB,MAAM,CAACkB,gBAA5B,EAA8C,CAA9C,EAAiDR,SAAjD;;AAEA,cAAMS,QAAQ,qBACTd,KADS;AAEZM,UAAAA,UAAU,EAAEE;AAFA,UAAd;;AAKA,cAAMO,QAAQ,GAAGrB,KAAK,CAACsB,GAAN,CAAWhB,KAAD,IACzBA,KAAK,CAACC,EAAN,KAAaH,KAAK,CAACG,EAAnB,GAAwBa,QAAxB,GAAmCd,KADpB,CAAjB;AAIA,eAAOe,QAAP;AACD;;AAED,YAAME,eAAe,GAAGR,KAAK,CAACC,IAAN,CAAWZ,KAAK,CAACQ,UAAjB,CAAxB;AACAW,MAAAA,eAAe,CAACN,MAAhB,CAAuBhB,MAAM,CAACiB,WAA9B,EAA2C,CAA3C;;AACA,YAAMM,QAAQ,qBACTpB,KADS;AAEZQ,QAAAA,UAAU,EAAEW;AAFA,QAAd;;AAKA,YAAME,aAAa,GAAGV,KAAK,CAACC,IAAN,CAAWP,GAAG,CAACG,UAAf,CAAtB;AACAa,MAAAA,aAAa,CAACR,MAAd,CAAqBhB,MAAM,CAACkB,gBAA5B,EAA8C,CAA9C,EAAiDR,SAAjD;;AACA,YAAMe,MAAM,qBACPjB,GADO;AAEVG,QAAAA,UAAU,EAAEa;AAFF,QAAZ;;AAKA,YAAMJ,QAAQ,GAAGrB,KAAK,CAACsB,GAAN,CAAWhB,KAAD,IAAgB;AACzC,YAAIA,KAAK,CAACC,EAAN,KAAaH,KAAK,CAACG,EAAvB,EAA2B,OAAOiB,QAAP,CAA3B,KACK,IAAIlB,KAAK,CAACC,EAAN,KAAaE,GAAG,CAACF,EAArB,EAAyB,OAAOmB,MAAP;AAC9B,eAAOpB,KAAP;AACD,OAJgB,CAAjB;AAMA,aAAOe,QAAP;;AACF,SAAK,kBAAL;AACE,aAAOrB,KAAP;;AACF;AACE,aAAOA,KAAP;AAxDJ;AA0DD,CA3DM","sourcesContent":["import { FETCH_STAGES } from 'store/actionTypes';\n\nimport data from './stages.json';\n\nconst PRELOAD: Array<any> = data;\n\nexport const stageReducer = (state = PRELOAD, action: any) => {\n  switch (action.type) {\n    case FETCH_STAGES:\n      return action.preload;\n    case 'ADD_CANDIDATE':\n      const start = state.find(\n        (stage: any) => stage.id === action.sourceDroppableId,\n      );\n      const end = state.find(\n        (stage: any) => stage.id === action.destinationDroppableId,\n      );\n      const candidate = start.candidates.find(\n        (candidate: any) => candidate.id === action.draggableId,\n      );\n\n      if (start === end) {\n        const stage = state.find(stage => stage.id === start.id);\n        const newCandidates = Array.from(stage.candidates);\n        newCandidates.splice(action.sourceIndex, 1);\n        newCandidates.splice(action.destinationIndex, 0, candidate);\n\n        const newStage = {\n          ...stage,\n          candidates: newCandidates,\n        };\n\n        const newState = state.map((stage: any) =>\n          stage.id === start.id ? newStage : stage,\n        );\n\n        return newState;\n      }\n\n      const startCandidates = Array.from(start.candidates);\n      startCandidates.splice(action.sourceIndex, 1);\n      const newStart = {\n        ...start,\n        candidates: startCandidates,\n      };\n\n      const endCandidates = Array.from(end.candidates);\n      endCandidates.splice(action.destinationIndex, 0, candidate);\n      const newEnd = {\n        ...end,\n        candidates: endCandidates,\n      };\n\n      const newState = state.map((stage: any) => {\n        if (stage.id === start.id) return newStart;\n        else if (stage.id === end.id) return newEnd;\n        return stage;\n      });\n\n      return newState;\n    case 'REMOVE_CANDIDATE':\n      return state;\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}