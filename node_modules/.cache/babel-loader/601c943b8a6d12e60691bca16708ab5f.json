{"ast":null,"code":"import { Map, fromJS } from 'immutable';\nimport { CHANGE_USER_STAGE, FAIL_CHANGE_USER_STAGE, CHANGE_ORDER_OF_USER_STAGE, FAIL_CHANGE_ORDER_OF_USER_STAGE, CREATE_USER_STAGE, FAIL_CREATE_USER_STAGE, FETCH_USER_STAGES, FAIL_FETCH_USER_STAGES, REMOVE_USER_STAGE, FAIL_REMOVE_USER_STAGE, UPDATE_USER_STAGE, FAIL_UPDATE_USER_STAGE, FETCH_USERS, FAIL_FETCH_USERS } from 'store/actionTypes/UserStage';\nconst initialState = {\n  users: [{\n    EmployeeId: 1,\n    JobOfferId: 1,\n    StageId: 1,\n    name: \"Mahmood\"\n  }, {\n    EmployeeId: 2,\n    JobOfferId: 1,\n    StageId: 2,\n    name: \"Mr x\"\n  }, {\n    EmployeeId: 3,\n    JobOfferId: 1,\n    StageId: 3,\n    name: \"Mr N\"\n  }, {\n    EmployeeId: 4,\n    JobOfferId: 1,\n    StageId: 4,\n    name: \"Mr K\"\n  }],\n  stages: [{\n    stageId: 1,\n    name: \"Interview\",\n    jobOfferId: 1,\n    Initiate: false\n  }, {\n    stageId: 2,\n    name: \"Employement\",\n    jobOfferId: 2,\n    Initiate: false\n  }, {\n    stageId: 3,\n    name: \"X\",\n    jobOfferId: 3,\n    Initiate: false\n  }, {\n    stageId: 4,\n    name: \"y\",\n    jobOfferId: 4,\n    Initiate: false\n  }]\n};\nexport const UserStageReducer = (state = fromJS(initialState), {\n  type,\n  EmployeeId,\n  StageId,\n  JobOfferId,\n  Initiate,\n  StageIds,\n  listOfUsers,\n  newUser,\n  userStages,\n  newUserStage,\n  createdNewStage,\n  newOrderOfStages\n}) => {\n  switch (type) {\n    // fetching some user data -> done\n    case FETCH_USERS:\n      return state.set('users', listOfUsers);\n\n    case FAIL_FETCH_USERS:\n      return state;\n    // updating a single usr Stage -> toDo\n\n    case UPDATE_USER_STAGE:\n      console.log(state.get('stages'));\n      return state;\n\n    case FAIL_UPDATE_USER_STAGE:\n      return state;\n    // fetch user stages -> done\n\n    case FETCH_USER_STAGES:\n      return state.set('stages', userStages);\n\n    case FAIL_FETCH_USER_STAGES:\n      return state;\n    // changing order of user Stage -> toDo\n\n    case CHANGE_ORDER_OF_USER_STAGE:\n      return state.set('stages', newOrderOfStages);\n\n    case FAIL_CHANGE_ORDER_OF_USER_STAGE:\n      return state;\n    // creating a new userStage -> done\n\n    case CREATE_USER_STAGE:\n      return state.set('stages', state.get('stages').push(newUserStage));\n\n    case FAIL_CREATE_USER_STAGE:\n      return state;\n    // changing user Stage -> toDo\n\n    case CHANGE_USER_STAGE:\n      const updater = state.get('users').findIndex(item => {\n        return item.id === 0;\n      });\n      console.log(updater);\n      return state.get('users');\n\n    case FAIL_CHANGE_USER_STAGE:\n      return state;\n    // removing a user stage -> toDo\n\n    case REMOVE_USER_STAGE:\n      const newState = Map(initialState);\n      const data = newState.find;\n      return state;\n\n    case FAIL_REMOVE_USER_STAGE:\n      return state;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/src/store/reducers/UserStage.ts"],"names":["Map","fromJS","CHANGE_USER_STAGE","FAIL_CHANGE_USER_STAGE","CHANGE_ORDER_OF_USER_STAGE","FAIL_CHANGE_ORDER_OF_USER_STAGE","CREATE_USER_STAGE","FAIL_CREATE_USER_STAGE","FETCH_USER_STAGES","FAIL_FETCH_USER_STAGES","REMOVE_USER_STAGE","FAIL_REMOVE_USER_STAGE","UPDATE_USER_STAGE","FAIL_UPDATE_USER_STAGE","FETCH_USERS","FAIL_FETCH_USERS","initialState","users","EmployeeId","JobOfferId","StageId","name","stages","stageId","jobOfferId","Initiate","UserStageReducer","state","type","StageIds","listOfUsers","newUser","userStages","newUserStage","createdNewStage","newOrderOfStages","set","console","log","get","push","updater","findIndex","item","id","newState","data","find"],"mappings":"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","sourcesContent":["import { Map, fromJS } from 'immutable'\nimport {\n    CHANGE_USER_STAGE,\n    FAIL_CHANGE_USER_STAGE,\n    CHANGE_ORDER_OF_USER_STAGE,\n    FAIL_CHANGE_ORDER_OF_USER_STAGE,\n    CREATE_USER_STAGE,\n    FAIL_CREATE_USER_STAGE,\n    FETCH_USER_STAGES,\n    FAIL_FETCH_USER_STAGES,\n    REMOVE_USER_STAGE,\n    FAIL_REMOVE_USER_STAGE,\n    UPDATE_USER_STAGE,\n    FAIL_UPDATE_USER_STAGE,\n    FETCH_USERS,\n    FAIL_FETCH_USERS,\n} from 'store/actionTypes/UserStage';\nconst initialState = {\n    users: [\n        { EmployeeId: 1, JobOfferId: 1, StageId: 1, name: \"Mahmood\" },\n        { EmployeeId: 2, JobOfferId: 1, StageId: 2, name: \"Mr x\" },\n        { EmployeeId: 3, JobOfferId: 1, StageId: 3, name: \"Mr N\" },\n        { EmployeeId: 4, JobOfferId: 1, StageId: 4, name: \"Mr K\" },\n\n    ],\n    stages: [\n        { stageId: 1, name: \"Interview\", jobOfferId: 1, Initiate: false },\n        { stageId: 2, name: \"Employement\", jobOfferId: 2, Initiate: false },\n        { stageId: 3, name: \"X\", jobOfferId: 3, Initiate: false },\n        { stageId: 4, name: \"y\", jobOfferId: 4, Initiate: false }\n    ]\n};\n\nexport const UserStageReducer = (state = fromJS(initialState), { type, EmployeeId, StageId, JobOfferId, Initiate, StageIds, listOfUsers, newUser, userStages, newUserStage, createdNewStage, newOrderOfStages }: any): any => {\n    switch (type) {\n        // fetching some user data -> done\n        case FETCH_USERS:\n            return state.set('users', listOfUsers)\n        case FAIL_FETCH_USERS:\n            return state\n\n\n        // updating a single usr Stage -> toDo\n        case UPDATE_USER_STAGE:\n            console.log(state.get('stages'));\n            return state\n\n        case FAIL_UPDATE_USER_STAGE:\n            return state\n\n\n        // fetch user stages -> done\n        case FETCH_USER_STAGES:\n            return state.set('stages', userStages)\n\n        case FAIL_FETCH_USER_STAGES:\n            return state\n\n\n        // changing order of user Stage -> toDo\n        case CHANGE_ORDER_OF_USER_STAGE:\n            return state.set('stages', newOrderOfStages)\n\n        case FAIL_CHANGE_ORDER_OF_USER_STAGE:\n            return state\n\n\n\n\n\n\n        // creating a new userStage -> done\n        case CREATE_USER_STAGE:\n            return state.set('stages', state.get('stages').push(newUserStage))\n        case FAIL_CREATE_USER_STAGE:\n            return state\n\n\n        // changing user Stage -> toDo\n        case CHANGE_USER_STAGE:\n            const updater = state.get('users').findIndex((item: any) => {\n                return item.id === 0\n            })\n            console.log(updater);\n            return state.get('users')\n        case FAIL_CHANGE_USER_STAGE:\n            return state\n\n        // removing a user stage -> toDo\n        case REMOVE_USER_STAGE:\n            const newState = Map(initialState);\n            const data = newState.find\n            return state\n\n        case FAIL_REMOVE_USER_STAGE:\n            return state\n\n\n\n\n        default:\n            return state\n    }\n};\n"]},"metadata":{},"sourceType":"module"}