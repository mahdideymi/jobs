{"ast":null,"code":"import Api from 'Api/api';\nimport { call, put, take, takeLatest } from 'redux-saga/effects';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_ERROR, DELETE_TOKEN } from 'store/actionTypes';\nimport { loginError, loginSuccess, saveToken, deleteToken } from 'store/actions';\nimport { message } from 'antd';\nexport function fakeAutoRize(email, password) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let headerConfig = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const result = await Api.post('company/login', {\n        email,\n        password\n      }, headerConfig).catch(error => {\n        if (error.response.status) {\n          message.error('لطفا نام کاربری یا رمز عبور را به درستی وارد نمایید');\n        } else if (error.response === undefined) {\n          message.error('لطفا وضعیت اینترنت را بررسی نمایید');\n        }\n      }).then(response => {\n        window.localStorage.removeItem('accessToken');\n        window.localStorage.removeItem('refreshToken');\n        window.localStorage.setItem('accessToken', response.data.accessToken);\n        window.localStorage.setItem('refreshToken', response.data.refreshToken);\n        resolve(response.data.accessToken);\n      });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nexport function* deleteTokenWorker() {\n  console.log('delete token worker');\n  window.localStorage.removeItem('refreshToken');\n  window.localStorage.removeItem('accessToken');\n  yield put(deleteToken());\n}\nexport function* authorize(email, password) {\n  try {\n    const token = yield call(fakeAutoRize, email, password);\n    yield put(loginSuccess(LOGIN_SUCCESS)); //@ts-ignore\n\n    yield put(saveToken(token, localStorage.getItem('accessToken')));\n  } catch (error) {\n    yield put(loginError(LOGIN_ERROR));\n  }\n}\nexport function* loginFlow() {\n  while (true) {\n    const _ref = yield take(LOGIN_REQUEST),\n          email = _ref.email,\n          password = _ref.password;\n\n    yield call(authorize, email, password);\n    console.log('saga deleted');\n    yield takeLatest(DELETE_TOKEN, deleteTokenWorker);\n  }\n}","map":{"version":3,"sources":["/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/src/store/sagas/loginSaga.tsx"],"names":["Api","call","put","take","takeLatest","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","DELETE_TOKEN","loginError","loginSuccess","saveToken","deleteToken","message","fakeAutoRize","email","password","Promise","resolve","reject","headerConfig","headers","result","post","catch","error","response","status","undefined","then","window","localStorage","removeItem","setItem","data","accessToken","refreshToken","e","deleteTokenWorker","console","log","authorize","token","getItem","loginFlow"],"mappings":"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","sourcesContent":["import Api from 'Api/api';\nimport { call, put, take, takeEvery, takeLatest } from 'redux-saga/effects';\nimport {\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_ERROR,\n  DELETE_TOKEN,\n} from 'store/actionTypes';\n\nimport {\n  loginError,\n  loginSuccess,\n  saveToken,\n  deleteToken,\n} from 'store/actions';\nimport { message } from 'antd';\nexport function fakeAutoRize(email: string, password: string) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let headerConfig = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      const result = await Api.post(\n        'company/login',\n        { email, password },\n        headerConfig,\n      )\n        .catch((error: any) => {\n          if (error.response.status) {\n            message.error(\n              'لطفا نام کاربری یا رمز عبور را به درستی وارد نمایید',\n            );\n          } else if (error.response === undefined) {\n            message.error('لطفا وضعیت اینترنت را بررسی نمایید');\n          }\n        })\n        .then((response: any) => {\n          window.localStorage.removeItem('accessToken');\n          window.localStorage.removeItem('refreshToken');\n          window.localStorage.setItem('accessToken', response.data.accessToken);\n          window.localStorage.setItem(\n            'refreshToken',\n            response.data.refreshToken,\n          );\n          resolve(response.data.accessToken);\n        });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function* deleteTokenWorker() {\n  console.log('delete token worker');\n  window.localStorage.removeItem('refreshToken');\n  window.localStorage.removeItem('accessToken');\n  yield put(deleteToken());\n}\n\nexport function* authorize(email: string, password: string) {\n  try {\n    const token = yield call(fakeAutoRize, email, password);\n    yield put(loginSuccess(LOGIN_SUCCESS));\n    //@ts-ignore\n    yield put(saveToken(token, localStorage.getItem('accessToken')));\n  } catch (error) {\n    yield put(loginError(LOGIN_ERROR));\n  }\n}\n\nexport function* loginFlow(): any {\n  while (true) {\n    const { email, password } = yield take(LOGIN_REQUEST);\n    yield call(authorize, email, password);\n    console.log('saga deleted');\n    yield takeLatest(DELETE_TOKEN, deleteTokenWorker);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}