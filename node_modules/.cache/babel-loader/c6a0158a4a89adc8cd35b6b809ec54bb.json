{"ast":null,"code":"import Api from 'Api/api';\nimport { call, put, take } from 'redux-saga/effects';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_ERROR } from 'store/actionTypes';\nimport { loginError, loginSuccess, saveToken } from 'store/actions';\nexport function fakeAutoRize(email, password) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let headerConfig = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const result = await Api.post('company/login', {\n        email,\n        password\n      }, headerConfig); // console.log(result.data.accessToken);\n\n      window.localStorage.setItem('accessToken', result.data.accessToken);\n      window.localStorage.setItem('refreshToken', result.data.refreshToken);\n      resolve(result.data.accessToken);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nexport function deleteToken() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      window.localStorage.setItem('accessToken', '');\n      resolve('');\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\nexport function* authorize(email, password) {\n  try {\n    const token = yield call(fakeAutoRize, email, password);\n    yield put(loginSuccess(LOGIN_SUCCESS)); //@ts-ignore\n\n    yield put(saveToken(token, localStorage.getItem('accessToken')));\n  } catch (error) {\n    yield put(loginError(LOGIN_ERROR));\n  }\n}\nexport function* loginFlow() {\n  while (true) {\n    const _ref = yield take(LOGIN_REQUEST),\n          email = _ref.email,\n          password = _ref.password;\n\n    yield call(authorize, email, password);\n  }\n}","map":{"version":3,"sources":["/home/rasoolhp/Desktop/profile-job/Profile-Jobs-Front/src/store/sagas/loginSaga.tsx"],"names":["Api","call","put","take","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","loginError","loginSuccess","saveToken","fakeAutoRize","email","password","Promise","resolve","reject","headerConfig","headers","result","post","window","localStorage","setItem","data","accessToken","refreshToken","e","deleteToken","authorize","token","getItem","error","loginFlow"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,IAApB,QAAgC,oBAAhC;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,WAAvC,QAA0D,mBAA1D;AAEA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,SAAnC,QAAoD,eAApD;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAqCC,QAArC,EAAuD;AAC5D,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI;AACF,UAAIC,YAAY,GAAG;AACjBC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADQ,OAAnB;AAKA,YAAMC,MAAM,GAAG,MAAMlB,GAAG,CAACmB,IAAJ,CACnB,eADmB,EAEnB;AAAER,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAFmB,EAGnBI,YAHmB,CAArB,CANE,CAWF;;AACAI,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,aAA5B,EAA2CJ,MAAM,CAACK,IAAP,CAAYC,WAAvD;AACAJ,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,EAA4CJ,MAAM,CAACK,IAAP,CAAYE,YAAxD;AACAX,MAAAA,OAAO,CAACI,MAAM,CAACK,IAAP,CAAYC,WAAb,CAAP;AACD,KAfD,CAeE,OAAOE,CAAP,EAAU;AACVX,MAAAA,MAAM,CAACW,CAAD,CAAN;AACD;AACF,GAnBM,CAAP;AAoBD;AAED,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAO,IAAId,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI;AACFK,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,aAA5B,EAA2C,EAA3C;AACAR,MAAAA,OAAO,CAAC,EAAD,CAAP;AACD,KAHD,CAGE,OAAOY,CAAP,EAAU;AACVX,MAAAA,MAAM,CAACW,CAAD,CAAN;AACD;AACF,GAPM,CAAP;AAQD;AAED,OAAO,UAAUE,SAAV,CAAoBjB,KAApB,EAAmCC,QAAnC,EAAqD;AAC1D,MAAI;AACF,UAAMiB,KAAK,GAAG,MAAM5B,IAAI,CAACS,YAAD,EAAeC,KAAf,EAAsBC,QAAtB,CAAxB;AACA,UAAMV,GAAG,CAACM,YAAY,CAACH,aAAD,CAAb,CAAT,CAFE,CAGF;;AACA,UAAMH,GAAG,CAACO,SAAS,CAACoB,KAAD,EAAQR,YAAY,CAACS,OAAb,CAAqB,aAArB,CAAR,CAAV,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAM7B,GAAG,CAACK,UAAU,CAACD,WAAD,CAAX,CAAT;AACD;AACF;AAED,OAAO,UAAU0B,SAAV,GAA2B;AAChC,SAAO,IAAP,EAAa;AAAA,iBACiB,MAAM7B,IAAI,CAACC,aAAD,CAD3B;AAAA,UACHO,KADG,QACHA,KADG;AAAA,UACIC,QADJ,QACIA,QADJ;;AAEX,UAAMX,IAAI,CAAC2B,SAAD,EAAYjB,KAAZ,EAAmBC,QAAnB,CAAV;AACD;AACF","sourcesContent":["import Api from 'Api/api';\nimport { call, put, take } from 'redux-saga/effects';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_ERROR } from 'store/actionTypes';\n\nimport { loginError, loginSuccess, saveToken } from 'store/actions';\nexport function fakeAutoRize(email: string, password: string) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let headerConfig = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n      const result = await Api.post(\n        'company/login',\n        { email, password },\n        headerConfig,\n      );\n      // console.log(result.data.accessToken);\n      window.localStorage.setItem('accessToken', result.data.accessToken);\n      window.localStorage.setItem('refreshToken', result.data.refreshToken);\n      resolve(result.data.accessToken);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function deleteToken() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      window.localStorage.setItem('accessToken', '');\n      resolve('');\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function* authorize(email: string, password: string) {\n  try {\n    const token = yield call(fakeAutoRize, email, password);\n    yield put(loginSuccess(LOGIN_SUCCESS));\n    //@ts-ignore\n    yield put(saveToken(token, localStorage.getItem('accessToken')));\n  } catch (error) {\n    yield put(loginError(LOGIN_ERROR));\n  }\n}\n\nexport function* loginFlow(): any {\n  while (true) {\n    const { email, password } = yield take(LOGIN_REQUEST);\n    yield call(authorize, email, password);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}